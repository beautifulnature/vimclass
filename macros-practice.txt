################################################################################
# Before: print "Macros are very fun!"
# After:  print("Macros are very fun!")

print("Macros are very fun!")
print("Macros are powerful.")
print("Macros use registers to store keystrokes.")
print("I'm so glad Vim has Macros!")

################################################################################
# Before: jason
# After:  passwd -l jason && echo jason >> locked_users.txt

jason
sophia
jack
emma
ava

################################################################################
# Before: 2798265253
# After:  (279) 826-5253

(279) 826-5253
(618) 903-4410
(148) 494-5696
(431) 790-6896
(279) 943-0841
(104) 747-8277
(691) 641-0205
(335) 581-9338
(590) 923-6283
(259) 655-9739
(878) 680-5143
(501) 332-8873
(799) 951-4683
(411) 783-8228
(961) 973-9991
(895) 827-6012
(985) 934-6956
(339) 618-9061
(190) 120-4747
(890) 808-5062
(546) 925-5241
(920) 700-1354
(213) 569-4193
(408) 301-8809
(930) 753-1230
(860) 299-0709
(704) 157-1881
(302) 597-6131
(325) 341-7438
(217) 828-3221
(285) 139-6731
(749) 721-5331
(591) 193-1954
(754) 622-5372
(715) 207-4664
(203) 746-2294
(260) 532-3972
(572) 491-6411
(243) 350-3994
(658) 863-6629
(351) 923-2904
(996) 877-5123
(558) 898-9433
(874) 443-7153
(274) 644-0780
(191) 505-3283
(604) 309-0832
(876) 887-1331
(893) 925-5738
(971) 141-0096

################################################################################
# Before: Jan 13 09:57:01 www1 kernel: [3947771.808744] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:6f:f0:08:00 SRC=190.18.193.152 DST=2.5.9.1 LEN=40 TOS=0x02 PREC=0x00 TTL=51 ID=25120 PROTO=TCP SPT=12502 DPT=23 WINDOW=4078 RES=0x00 SYN URGP=0
# After: Jan 13 09:57:01,190.188.193.152,23

Jan 13 09:57:01 www1 kernel: [3947771.808744] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:6f:f0:08:00 SRC=190.18.193.152 DST=2.5.9.1 LEN=40 TOS=0x02 PREC=0x00 TTL=51 ID=25120 PROTO=TCP SPT=12502 DPT=23 WINDOW=4078 RES=0x00 SYN URGP=0
Jan 13 09:57:03 www1 kernel: [3947773.766305] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:6f:f0:08:00 SRC=178.161.241.247 DST=2.5.9.1 LEN=40 TOS=0x00 PREC=0x00 TTL=57 ID=1285 PROTO=TCP SPT=2461 DPT=23 WINDOW=32485 RES=0x00 SYN URGP=0
Jan 13 09:57:53 www1 kernel: [3947824.252547] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:3f:f0:08:00 SRC=121.97.255.189 DST=2.5.9.1 LEN=40 TOS=0x00 PREC=0x00 TTL=243 ID=18753 PROTO=TCP SPT=44235 DPT=23 WINDOW=14600 RES=0x00 SYN URGP=0
Jan 13 09:58:03 www1 kernel: [3947833.987853] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:3f:f0:08:00 SRC=121.42.48.1 DST=2.5.9.1 LEN=60 TOS=0x00 PREC=0x00 TTL=46 ID=56401 DF PROTO=TCP SPT=51370 DPT=22 WINDOW=29200 RES=0x00 SYN URGP=0
Jan 13 09:58:04 www1 kernel: [3947834.989647] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:3f:f0:08:00 SRC=121.42.48.1 DST=2.5.9.1 LEN=60 TOS=0x00 PREC=0x00 TTL=46 ID=56402 DF PROTO=TCP SPT=51370 DPT=22 WINDOW=29200 RES=0x00 SYN URGP=0
Jan 13 09:58:14 www1 kernel: [3947844.954077] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:3f:f0:08:00 SRC=19.151.115.132 DST=2.5.9.1 LEN=40 TOS=0x00 PREC=0x00 TTL=245 ID=58247 PROTO=TCP SPT=16299 DPT=23 WINDOW=14600 RES=0x00 SYN URGP=0
Jan 13 09:58:35 www1 kernel: [3947866.407376] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:6f:f0:08:00 SRC=67.20.141.62 DST=2.5.9.1 LEN=40 TOS=0x00 PREC=0x00 TTL=248 ID=52033 PROTO=TCP SPT=47676 DPT=59766 WINDOW=1024 RES=0x00 SYN URGP=0
Jan 13 09:58:52 www1 kernel: [3947883.064171] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:3f:f0:08:00 SRC=171.233.166.26 DST=2.5.9.1 LEN=44 TOS=0x00 PREC=0x00 TTL=237 ID=49049 PROTO=TCP SPT=32189 DPT=23 WINDOW=14600 RES=0x00 SYN URGP=0
Jan 13 10:00:06 www1 kernel: [3947957.338001] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:3f:f0:08:00 SRC=101.85.53.249 DST=2.5.9.1 LEN=40 TOS=0x00 PREC=0x00 TTL=52 ID=17125 PROTO=TCP SPT=5703 DPT=23 WINDOW=59049 RES=0x00 SYN URGP=0
Jan 13 10:00:26 www1 kernel: [3947976.555062] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:6f:f0:08:00 SRC=17.172.212.191 DST=2.5.9.1 LEN=40 TOS=0x00 PREC=0x00 TTL=246 ID=12721 PROTO=TCP SPT=35320 DPT=23 WINDOW=14600 RES=0x00 SYN URGP=0

################################################################################
# Before:
#         Country China
#         1,380,950,000 people
#
# After:
#         1,380,950,000;China

1,380,950,000;China

1,310,540,000;India

324,369,000;United States

260,581,000;Indonesia

206,960,000;Brazil

################################################################################
# Before: <a href="#">@armyspy.com</a>
# After:  armyspy.com

<a href="#">@armyspy.com</a><a href="#">@cuvox.de</a><a href="#">@dayrep.com</a><a href="#">@einrot.com</a><a href="#">@fleckens.hu</a><a href="#">@gustr.com</a><a href="#">@jourrapide.com</a><a href="#">@rhyta.com</a><a href="#">@superrito.com</a><a href="#">@teleworm.us</a>

This training is provided by LinuxTrainingAcademy.com.

Macros

Goal:

The goal of this exercise is to practice creating and using macros.

Instructions:

Open the macros-practice.txt file

First, start a command line session on your local machine.
Next, use vim to open the "macros-practice.txt" file that came in the course downloads.
To do that, navigate to the location of the file.
Remember this could be different for you depending on where you extracted the contents of the file.
This example assumes the course download was saved into your Downloads folder and extracted from there.

cd Downloads
cd vimclass
vim macros-practice.txt

Convert Old Python code to New Python Code

Let's say you have some old Python code (version 2.6 or earlier) that needs to be updated to work with the new Python interpreter (version 3.0 or later).
The print statement was replaced with the print() function.
That means you'll need to change the following line from this:

Let's change the following line from this:

print("Macros are very fun!")

To this

print "Macros are very fun!"

Let's do this with a macro.
By the way, it's not important to know anything about Python.
The goal here is to give you a practical example for you to practice you Vim macros skills with.

Here is one way to accomplish this task:

. Place your cursor on the line that reads: print "Macros are very fun!"
. Start recording into the "a register with qa

. Normalise your cursor position to the beginning of the line by typing 0.

. Position the cursor at the next space with f<SPACE>

. Replace the space with an opening parenthesis with r(.

. Append a closing parenthesis to the line with A) and press <ESCAPE> to return to normal mode.

. Now position the cursor on the next line with j so the macro can be easily repeated.

. Finally type q to stop recording the macro.

You can examine the contents of your macro by looking at the "a register with :reg a<ENTER>.
Here is what it should look like:

0f r(A)€ýaj

Play your macro on the next line by typing @a.
Use @@ to repeat the macro on.
Continue repeating the macro with @@ on the remaining print statements.

NOTE: The solution provided above is not the only way to accomplish the task!
One simple example replace f<SPACE> with t" in the macro.
Both perform the same act of positioning the cursor under the space.
As lone as you get the desired results you're after, that's all that matters.

Create a shell script from a list.

The goal is to turn this text:

jason
sophia
jack
emma
ava

into this:

passwd -l jason && echo jason >> locked_users.txt
passwd -l sophia && echo sophia >> locked_users.txt
passwd -l jack && echo jack >> locked_users.txt
passwd -l emma && echo emma >> locked_users.txt
passwd -l ava && echo ava >> locked_users.txt

Here is one way to accomplish this task:

. Place your cursor on the line that contains jason

Here is one way to accomplish this task:

. Place your cursor on the line that contains jason

. Start recording inot the "b register with qb

. Yank the user name into the default register with yaw

. Start insert mode at the beginning of the line with I.
Now type the text "passwd -I" and press <ESCAPE>.

. Next, start insert mode at the end of the line with A and type " && echo ".
Press <ESCAPE> to return to normal mode.

. Next, paste the contents of the unnamed register after the cursor with p.

. Continue appending by typing a, and then typing ">> locked_users.tx" followed by <ESCAPE>.

. Now position the cursor on the next line with j so the macro can easily repeated.

. Finally type q to stop recording the macro.

You can examine the contents of your macro by looking at the "b register with :reg b<ENTER>.
Here is what it should look like:

yawIpasswd -l €ýaA && echo €ýapA >> locked_users.txt€ýaj

Plan your macro on the next line by typing @b.
You can probably see that there are three more items in this list, so use 3@b to repeat the macro four times.

Normalise Phone Numbers

Next, create a macro that changes a United States style phone number from:

2798265253

To:

(279) 826-5253

Here is one way to accomplish this task:

. Place your cursor on the line that contains "2798265253".

. Start recording into the "p register with qp

. Start insert mode at the beginning of the line with I

. Type an opening parenthesis ( and press <ESCAPE> to return to normal mode.

. Position the cursor under the 9 by typing l 3 times.

. Type a to append text after the cursor and type )<SPACE>.

. Position the cursor under the 6 by typing l 3 times.

. Type a- to append a hyphen and press <ESCAPE> to return to normal mode.

. Now position the cursor on the next line with j so the macro can easily repeated.

. Finally type q to stop recording the macro.

You can examine the contents of your macro by looking at the "p register with :reg p<ENTER>.
Here is what it should look like:

I(llla) llla-j

Because there is a long list of phone numbers that scroll off the bottom of your screen you can't easily know how many times you need to apply the macro.
Also, repeating @@ could take quite a while.
So, get the range you need to apply the macro to.
Turn on line numbering with :set nu<ENTER>.
Note that your cursor is currently on line 25.
Now page down to the end of the list of phone numbers with Ctrl+f.
You'll find the last phone number is on line 73.

Execute the macro over this range using the normal command.
Type :25,73 normal @p<ENTER>.
Now check that the macro was executed over that entire range by paging up with Ctrl+b.

Extract Important Data from a Log File

The next set of lines in the file contain system logs from a Linux server.
Specifically these lines are logs of blocked connection attempts by the local Linux firewall.
Your goal is to extract the timestamp, the source IP address of the connection attempt, and the destination port.

The sourece IP address follows "SRC=". Example; SRC=190.18.193.152
The destination port follows "DPT=". Example; DPT=23

This line:

Jan 13 09:57:01 www1 kernel: [3947771.808744] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:6f:f0:08:00 SRC=190.18.193.152 DST=2.5.9.1 LEN=40 TOS=0x02 PREC=0x00 TTL=51 ID=25120 PROTO=TCP SPT=12502 DPT=23 WINDOW=4078 RES=0x00 SYN URGP=0

Will be narrowed down to just this commad separated value line:

Jan 13 09:57:01 www1 kernel: [3947771.808744] [BLOCK] IN=eth0 OUT= MAC=e6:e9:2d:04:b6:95:3c:8a:b0:0d:6f:f0:08:00 SRC=190.18.193.152 DST=2.5.9.1 LEN=40 TOS=0x02 PREC=0x00 TTL=51 ID=25120 PROTO=TCP SPT=12502 DPT=23 WINDOW=4078 RES=0x00 SYN URGP=0

Jan 13 09:57:01,190.18.193.152,23

Here is one way to accomplish this task:

. Place your cursor on the line that starts with "Jan 13 09:57:01".
. Start recording into the "l register with ql.
. Normalise your cursor position to the beginning of the line by typing 0.
. Position your cursor on the space just after the timestamp by typing tw.
. Now delete all the text up to "SRC=". You can do this with dtS.
. Now delete SRC with dw.
. Next, replace "=" with a comma: r,.
. Position the cursor after the IP address with f<SPACE>.
. Delete the text upto "DPT=" with d/DPT<ENTER>.
. Now delete DPT with dw.
. Next, replace "=" with a comma: r,.
. Position the cursor after the port number with f<SPACE>.
. Delete the remaining text on the line with D.
. Now position the cursor on the next line with j so the macro can be easily repeated.
. Finally type q to stop recording the macro.

You can examine the contents of your macro by looking at the "l register with :reg l<ENTER>.
Here is what it should look like:

0twdtSdwr,f d/DPTdwr,f Dj

As always, there are other ways to accomplish the same task.
Just on simple example is using 2cw,<ESCAPE> to change "SRC=" to "," instead of using dwr,.
Take a moment and think of other ways to alter this macro and get the same result.

Test your macro on the next line by typing @l.
If it looks correct, continue with @@ until all the lines are in the desired format.

Condense Data From Multiple Lines into a Single Line

Remember that macros are just a series of recorded keystrokes.
Even though you've been working on macros that manipulate single line, you can as easily manipulate multiple lines.
Let's say you want to turn these three lines into one line.

Before:
Country China
1,380,950,000 people

After:
1,380,950,000;China

Here is one way to accomplish this task:
. Place your cursor on the line that reads "Country China".
. Start recording into the "c register with qc.
. Normalise your cursor position to the beginning of the line by typing 0.
. Delete the word "Country" with dw.
. Move to the line below with j.
. Cut the number into the unnamed register with dW.
. Move up to the original line with k.
. Paste the number before your cursor position with P.
. Replace the space with a semicolon by typing r;.
. Move to the line below with j.
. Delete the current line and the next line with 2dd.
. Finally type q to stop recording the macro.

You can examine the contents of your macro by looking at the "c register with :reg c<ENTER>.
Here is what it should look like:

"c 0dwjdWkPr;j2dd

Now use a count to repeat the macor 4 times to format the rest of the data in this se.
Type 4@c.

As always, there are multiple ways to achieve the same result in Vim.

Extract Data from HTML

Here are a list of links (<a> tags) on a single line of HTML.

<a href="#">@armyspy.com</a><a href="#">@cuvox.de</a><a href="#">@dayrep.com</a><a href="#">@einrot.com</a><a href="#">@fleckens.hu</a><a href="#">@gustr.com</a><a href="#">@jourrapide.com</a><a href="#">@rhyta.com</a><a href="#">@superrito.com</a><a href="#">@teleworm.us</a>

The goal is to convert those links to the following

armyspy.com
cuvox.de
dayrep.com
einrot.com
fleckens.hu
gustr.com
jourrapide.com
rhyta.com
superrito.com
teleworm.us

Here is one way to accomplish this task:
. Place your cursor at the beginning of the line that starts with "<a". Start recording into the "q register with qq
. Delete the text up to and including @ with df@.
. Position the cursor under the < with f<.
. Replace </a> with <ENTER> by typing cf><ENTER><ESCAPE>.
. Finally type q to stop recording the macro.

You can examine the contents of your macro by looking at the "q register with "reg q<ENTER>.
Here is what it should look like:

"q 0df@f<cf>

Execute the macro with @q.
Keep repeating the macro with @@ until you are left with the desired text.

Exit out of Vim
If you want to abandon your changes so you can try this practice exercise again, use :q!<ENTER>.
